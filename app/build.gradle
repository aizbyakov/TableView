/*
 * MIT License
 *
 * Copyright (c) 2021 Evren CoÅŸkun
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

apply plugin: 'com.android.application'
apply from: 'signUtils.gradle'

android {
    namespace "com.evrencoskun.tableviewsample"

    compileSdkVersion PRJ_COMPILE_SDK_VERSION
    buildToolsVersion PRJ_BUILD_TOOLS_VERSION

    defaultConfig {
        minSdkVersion PRJ_MIN_SDK_VERSION
        targetSdkVersion PRJ_TARGET_SDK_VERSION

        versionCode PRJ_VERSION_CODE
        versionName PRJ_VERSION_NAME

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    def releaseSignConfig = getSignConfig('RELEASE', "$rootProject.rootDir/../keystore/keystore.properties")

    signingConfigs {
        if (releaseSignConfig) release releaseSignConfig
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (releaseSignConfig) signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JAVA_SRC_COMPATIBILITY
        targetCompatibility JAVA_TARGET_COMPATIBILITY
    }
}

dependencies {
    implementation project(':tableview')

    implementation "androidx.recyclerview:recyclerview:1.3.2"
}

task cleanArtifacts(type: Delete) {
    delete fileTree(dir: "$ARTIFACTS_DIRECTORY", include: "**/$rootProject.name*.apk")
    delete fileTree(dir: "$ARTIFACTS_DIRECTORY", include: "**/$rootProject.name*.aab")
}

task copyArtifacts(dependsOn: cleanArtifacts) {
    doFirst {
        println "APK"
        println ""

        copyArtifactsImpl("$buildDir/outputs/")

        println ""
        println ""

        println "BUNDLE"
        println ""

        copyArtifactsImpl("$buildDir/intermediates/apk/")
    }
}

ext.copyArtifactsImpl = { sourceRoot ->
    println "SOURCE: $sourceRoot"
    println "TARGET: $ARTIFACTS_DIRECTORY"
    println ""

    copy {
        from(fileTree(sourceRoot).files)
        into(ARTIFACTS_DIRECTORY)
        include('*.apk', '*.aab')

        eachFile {
            println "FILE: $it.relativeSourcePath -> $it.relativePath"
        }
    }
}

build.finalizedBy(copyArtifacts)
