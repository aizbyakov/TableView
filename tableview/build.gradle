apply plugin: 'com.android.library'

def libName = 'tableview'

android {
    namespace "com.evrencoskun.tableview"

    compileSdkVersion PRJ_COMPILE_SDK_VERSION
    buildToolsVersion PRJ_BUILD_TOOLS_VERSION

    defaultConfig {
        minSdkVersion PRJ_MIN_SDK_VERSION
        targetSdkVersion PRJ_TARGET_SDK_VERSION

        versionCode PRJ_VERSION_CODE
        versionName PRJ_VERSION_NAME

        archivesBaseName = "$libName-$versionName"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JAVA_SRC_COMPATIBILITY
        targetCompatibility JAVA_TARGET_COMPATIBILITY
    }
}

dependencies {
    implementation "androidx.recyclerview:recyclerview:1.3.2"

    androidTestImplementation "androidx.test.espresso:espresso-core:3.5.1"
    androidTestImplementation "androidx.test.ext:junit:1.1.5"
    androidTestImplementation "androidx.test:rules:1.5.0"

    testImplementation 'junit:junit:4.13.2'
}

task cleanArtifacts(type: Delete) {
    delete fileTree(dir: "$ARTIFACTS_DIRECTORY" , include: "**/${libName}*.aar")
    delete fileTree(dir: "$ARTIFACTS_DIRECTORY" , include: "**/${libName}*sources.jar")
}

task copyArtifacts(dependsOn: cleanArtifacts) {
    def sourceRoot = "$buildDir/outputs/aar"

    doFirst{
        println "SOURCE: $sourceRoot"
        println "TARGET: $ARTIFACTS_DIRECTORY"
        println ""

        copy {
            from(fileTree(sourceRoot).files)
            into(ARTIFACTS_DIRECTORY)
            include("*.aar")

            eachFile {
                println "FILE: $it.relativeSourcePath -> $it.relativePath"
            }
        }
    }
}

build.finalizedBy(copyArtifacts)

task generateSourcesJar() {
    def sourcesRoot = "$projectDir/src/main/java"
    def cmd = "jar cvf \"$ARTIFACTS_DIRECTORY/$archivesBaseName-sources.jar\" -C \"$sourcesRoot/\" com"

    doFirst {
        println "GENERATE SOURCES JAR"
        println "SOURCES: $sourcesRoot"
        println "CMD: $cmd"

        exec {
            commandLine 'cmd', '/c', cmd
        }
    }
}

copyArtifacts.finalizedBy(generateSourcesJar)
